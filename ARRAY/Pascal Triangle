// ques1: give row and column and tell the element at place
// brute: will use NCR formula to find the element at that place
#include <iostream>
#include <vector>
using namespace std;
void funcNcR(int n, int r) {
    long long res = 1;
    for (int i = 0; i < r; i++) {
        res = res * (n - i);
        res = res / (i + 1);
    }
    cout << "Element at position (" << n << ", " << r << ") is: " << res << endl;
}
int main() {
    int n, r;
    cout << "Enter the row and column (0-indexed): ";
    cin >> n >> r;
    funcNcR(n, r);
    return 0;
}


// ques 2: Print any Nth row of pascal trinagle
// brute: will use NCR formula to find the element at that place
#include <iostream> 
#include <vector>
using namespace std;
void funcNcR( int n){
    long long res = 1;
    cout << res << " "; // Print nC0, which is always 1
        for (int c = 1; c <= n; c++) {
            res = res * (n - c + 1);
            res = res / c;
            cout << res << " ";
        }
        cout << endl;
    }
int main() {
    int n;
    cout << "Enter the row number (0-indexed): ";
    cin >> n;
    funcNcR(n);
    return 0;}


// optimal:
#include<iostream>
#include<vector>
using namespace std;
vector<int> pascalTriangle(int n){
    int ans = 1;
    cout<<ans<<" ";
    for(int i=1;i<=n;i++){
        ans= ans * (n-i);
        ans= ans/i;
        cout<<ans<<" ";
}    }
int main(){
    int n;
    cout<<"Enter the row number (0-indexed): ";
    cin>>n;
    pascalTriangle(n);
    return 0;
}



// ques 3: print the entire triangle for given N
#include<iostream>
#include<vector>
using namespace std;
vector<int> generateRow( int row){
    long long ans = 1;
    vector<int> ansRow;
    ansRow.push_back(ans);
    for(int col=1; col<row; col++){
        ans= ans * (row-col)/col;
        ansRow.push_back(ans);
    }
    return ansRow;
}
vector<vector<int>> pascalTrle(int N){
    vector<vector<int>> ans;
    for(int i=1; i<=N; i++){
        ans.push_back(generateRow(i));
    }
    return ans;
}
int main(){
    int n;
    cout<<"Enter the number of rows: ";
    cin>>n;
    vector<vector<int>> ans = pascalTrle(n);
    for (const auto& row : ans) {
        for (const auto& elem : row) {
            cout << elem << " ";
        }
        cout << endl;
    }
    return 0;
}
