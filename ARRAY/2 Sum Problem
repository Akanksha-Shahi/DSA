// brute force: pick up the first elemnt and pick up the second element and check if their sum is equal to target
#include <iostream>
#include<vector>
using namespace std;
vector<int> twoSum(vector <int> &arr, int target){
    for (int i=0; i<arr.size(); i++){
        for ( int j=0;j<arr.size(); j++){
            if (i = j) continue; // skips if both indices are the same
            if ( arr[i] + arr[j] == target){
                return {i, j}; // returns the indices of the two elements that sum up to the target
            }
        }
    }
    return {}; // returns an empty vector if no such pair is found
}
int main(){
    int n, target;
    cout<<" enter the size of the array:";
    cin>> n;
    vector<int> arr(n);
    cout<<" enter the elements of the array:";
    for ( int i=0; i<n; i++){
        cin>> arr[i]; // reads the elements of the array
    }
    cout<<" enter the target sum:";
    cin>> target; // reads the target sum
    vector<int> result = twoSum(arr, target);
    if ( result.size() == target ){
        cout<<" indices of the two elements that sum up to the target are: "<< result[0]<< " and "<< result[1]<< endl;
    } else {
        cout<<" no such pair found"<< endl;
    }
    return 0;
}


// better solution(1):will use hashing
#include <iostream>
#include <map>
#include<vector>
#include<algorithm>
using namespace std;
string read( int n , vector<int> book, int target){
    map<int, int> mpp;
    for ( int i=0; i<n; i++){
        int a= book[i];
        int moretarget= target - a;
        if ( mpp.find(moretarget) != mpp.end()){
            return "YES"; // returns "YES" if a pair with the target sum is found
        }
        mpp[a] = i;//stores the current element in the map
    }
    return "NO"; // returns "NO" if no such pair is found
}
int main(){
    int n, target;
    cout<<" enter the size of the array:";
    cin>> n;
    vector<int> arr(n);
    cout<<" enter the elements of the array:";
    for ( int i=0; i<n; i++){
        cin>> arr[i]; // reads the elements of the array
    }
    cout<<" enter the target sum:";
    cin>> target; // reads the target sum
    string result = read(n, arr, target);
    cout<< result<< endl; // prints the result
    return 0;
}



// better solution (2):
#include<iostream>
#include<vector>
#include<map>
#include<algorithm>
using namespace std;
vector<int> twoSum(vector<int> & nums, int target){
    map<int, int> mpp;
    int n = nums.size();
    for ( int i=0; i<n; i++){
        int num= nums[i];
        int moreNeeded= target- num;
        if ( mpp.find(moreNeeded) != mpp.end()){
            return {mpp[moreNeeded], i}; // returns the indices of the two elements that sum up to the target
        }
        mpp[num] = i; // stores the index of the current element in the map
    }
    return {}; // returns an empty vector if no such pair is found
}
int main(){
    int n, target;
    cout<<" enter the size of the array:";
    cin>> n;
    vector<int> arr(n);
    cout<<" enter the elements of the array:";
    for ( int i=0; i<n; i++){
        cin>> arr[i]; // reads the elements of the array
    }
    cout<<" enter the target sum:";
    cin>> target; // reads the target sum
    vector<int> result = twoSum(arr, target);
    if (result.size() == 2) {
        cout << "indices of the two elements that sum up to the target are: " << result[0] << " and " << result[1] << endl;
    } else {
        cout << "no such pair found" << endl;
    }
    return 0;
}


// optimal solution: will use 2 pointer concept
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
string read( int n , vector<int> book, int target){
    int left = 0, right = n-1;
    sort(book.begin(), book.end());
    while ( left < right){
        int sum = book[left] + book[right];
        if ( sum == target){
            return "YES"; // returns "YES" if a pair with the target sum is found
        } else if ( sum < target){
            left++; // moves the left pointer to the right to increase the sum
        } else {
            right--; // moves the right pointer to the left to decrease the sum
        }
    }
    return "NO"; // returns "NO" if no such pair is found
}
int main(){
    int n, target;
    cout<<" enter the size of the array:";
    cin>> n;
    vector<int> arr(n);
    cout<<" enter the elements of the array:";
    for ( int i=0; i<n; i++){
        cin>> arr[i]; // reads the elements of the array
    }
    cout<<" enter the target sum:";
    cin>> target; // reads the target sum
    string result = read(n, arr, target);
    cout<< result<< endl; // prints the result
    return 0;
}
