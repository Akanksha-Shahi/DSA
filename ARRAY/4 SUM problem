// brute: O(n^4) approach
#include<iostream>
#include<vector>
#include<set>
#include<algorithm>
using namespace std;
vector <vector<int>> quadruplet(int n, vector<int> &num, int target){
    vector<vector<int>> ans;
    set <vector<int>> st;
    for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            for(int k=j+1;k<n;k++){
                for(int l=k+1;l<n;l++){
                    long long sum = num[i]+num[j];
                    sum += num[k];
                    sum += num[l];
                    if(sum ==target){
                        vector<int> temp = {num[i],num[j],num[k],num[l]};
                        sort (temp.begin(),temp.end());
                        st.insert(temp);
                    }
                }
            }
        }
    }
    vector<vector<int>> ans(st.begin(),st.end());
    return ans;
}
int main(){
    int n;
    cout<<"Enter the size of array: ";
    cin>>n;
    vector<int> num(n);
    cout<<"Enter the elements of array: ";
    for(int i=0;i<n;i++){
        cin>>num[i];
    }
    int target;
    cout<<"Enter the target sum: ";
    cin>>target;
    vector<vector<int>> result = quadruplet(n,num,target);
    cout<<"The unique quadruplets that sum to "<<target<<" are: "<<endl;
    for(auto quadruplet : result){
        for(auto val : quadruplet){
            cout<<val<<" ";
        }
        cout<<endl;
    }
    return 0;
}


// better: O(n^3logn) approach
#include<iostream>
#include<vector>
#include<set>
#include<algorithm>
using namespace std; 
vector <vector<int>> quadruplet(int n, vector<int> &num, int target){
    vector<vector<int>> ans;
    set <vector<int>> st;
    for (int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            set<long long> hashset;
            for(int k=j+1;k<n;k++){
                long long sum = num[i]+num[j];
                sum += num[k];
                int fourth = target - (sum);
                if(hashset.find(fourth) != hashset.end()){
                    vector<int> temp = {num[i],num[j],num[k],fourth};
                    sort (temp.begin(),temp.end());
                    st.insert(temp);
                }
                hashset.insert(num[k]);
            }
        }
    }
    vector<vector<int>> ans(st.begin(),st.end());
    return ans;} 
int main(){
    int n;
    cout<<"Enter the size of array: ";
    cin>>n;
    vector<int> num(n);
    cout<<"Enter the elements of array: ";
    for(int i=0;i<n;i++){
        cin>>num[i];
    }
    int target;
    cout<<"Enter the target sum: ";
    cin>>target;
    vector<vector<int>> result = quadruplet(n,num,target);
    cout<<"The unique quadruplets that sum to "<<target<<" are: "<<endl;
    for(auto quadruplet : result){
        for(auto val : quadruplet){
            cout<<val<<" ";
        }
        cout<<endl;
    }
    return 0;
}
 
