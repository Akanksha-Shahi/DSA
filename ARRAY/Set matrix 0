// brute: iterate over the matrix and search for 0 then in the respective columns and rows make all other elements as -1 and later mark them as 0.
#include<iostream>
#include<vector>
using namespace std;
void markRow(int row, vector<vector<int>>& matrix) {
    int m = matrix[0].size();
    for (int j = 0; j < m; j++) {
        if (matrix[row][j] != 0) { // don't change the 0s to -1
            matrix[row][j] = -1; // mark the entire row as -1
        }
    }
}

void markCol(int col, vector<vector<int>>& matrix) {
    int n = matrix.size();
    for (int i = 0; i < n; i++) {
        if (matrix[i][col] != 0) { // don't change the 0s to -1
            matrix[i][col] = -1; // mark the entire column as -1
        }
    }
}

void setZeroes(vector<vector<int>>& matrix) {
    int n = matrix.size();
    int m = matrix[0].size();
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (matrix[i][j] == 0) {
                markRow(i, matrix);
                markCol(j, matrix);
            }
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (matrix[i][j] == -1) { // convert all -1 to 0
                matrix[i][j] = 0;
            }
        }
    }
}
int man(){
    int n, m;
    cout << "Enter the number of rows and columns of the matrix: ";
    cin >> n >> m;
    vector<vector<int>> matrix(n, vector<int>(m));
    cout << "Enter the elements of the matrix: ";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> matrix[i][j];
        }
    }
    setZeroes(matrix);
    cout << "Matrix after setting zeroes: " << endl;
    for (const auto& row : matrix) {
        for (const auto& elem : row) {
            cout << elem << " ";
        }
        cout << endl;
    }
    return 0;
}



// better: iterate to search for 0 and then mark 1 in the column and row as 0 and at last reiterate
#include <iostream>
#include <vector>
using namespace std;
void setZeroes(vector<vector<int>>& matrix) {
    int n = matrix.size();
    int m = matrix[0].size();
    vector<int> row(n, 1); // to mark the rows
    vector<int> col(m, 1); // to mark the columns
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (matrix[i][j] == 0) {
                row[i] = 0; // mark the row
                col[j] = 0; // mark the column
            }
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (row[i] == 0 || col[j] == 0) { // if either the row or column is marked, set the element to 0
                matrix[i][j] = 0;
            }
        }
    }
}
int main() {
    int n, m;
    cout << "Enter the number of rows and columns of the matrix: ";
    cin >> n >> m;
    vector<vector<int>> matrix(n, vector<int>(m));
    cout << "Enter the elements of the matrix: ";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> matrix[i][j];
        }
    }
    setZeroes(matrix);
    cout << "Matrix after setting zeroes: " << endl;
    for (const auto& row : matrix) {
        for (const auto& elem : row) {
            cout << elem << " ";
        }
        cout << endl;
    }
    return 0;
}



//optimal: here we will start from the bottom of matrix and will not perform any action on the first row and 1st column then 1st we will go for row and then for column
#include <iostream>
#include <vector>
using namespace std;
void setZeroes(vector<vector<int>> &matrix, int n ,int m) {
    int col0 = 1;
    for (int i=0; i<n; i++){
        for (int j=0; j<m; j++){
            if ( matrix[i][j] == 0){
                matrix[i][0] = 0; // mark the first element of the row
                if ( j != 0) {
                    matrix[0][j] = 0; // mark the first element of the column
                }
                else{
                    col0 = 0; // if the first column has a 0, mark col0 as 0
                }
            }
        }
        for (int i =1; i<n; i++){
            for (int j=1; j<m; j++){
                if ( matrix[i][j]!= 0){
                    if ( matrix[i][0] == 0 || matrix[0][j] == 0){ // if either the row or column is marked, set the element to 0
                        matrix[i][j] = 0;
                    }
                }
            }
        }
        if ( matrix[0][0] == 0){ // if the first row has a 0, set the entire first row to 0
            for ( int j=0; j<m; j++){
                matrix[0][j] = 0;
            }
        }
            if ( col0 == 0){ // if the first column has a 0, set the entire first column to 0
                for ( int i=0; i<n; i++){
                    matrix[i][0] = 0;
                }
            }
            // No return statement needed for void function
        }
    }
int main() {
    int n, m;
    cout << "Enter the number of rows and columns of the matrix: ";
    cin >> n >> m;
    vector<vector<int>> matrix(n, vector<int>(m));
    cout << "Enter the elements of the matrix: ";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> matrix[i][j];
        }
    }
    setZeroes(matrix, n, m);
    cout << "Matrix after setting zeroes: " << endl;
    for (const auto& row : matrix) {
        for (const auto& elem : row) {
            cout << elem << " ";
        }
        cout << endl;
    }
    return 0;
}    
