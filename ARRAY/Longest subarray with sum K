// brute force solution: generate all subrrays and check for longest subarray with sum K
#include <iostream>
#include<vector>
using namespace std;
int longestSubarray(vector<int> &arr, int k){
    int len =0;
    for ( int i=0; i<arr.size(); i++){
        for (int j=i; j<arr.size(); j++){
            int sum =0;
            for ( int k=i; k<=j; k++){
                sum += arr[k]; // calculates the sum of the subarray from index i to j
            }
            if ( sum == k){
                len = max(len, j-i+1); // updates the length of the longest subarray if needed
            }}}
        return len; // returns the length of the longest subarray with sum K
}
int main(){
    int n, k;
    cout<<" enter the size of the array:";
    cin>> n;
    vector<int> arr(n);
    cout<<" enter the elements of the array:";
    for ( int i=0; i<n; i++){
        cin>> arr[i]; // reads the elements of the array
    }
    cout<<" enter the value of k:";
    cin>> k; // reads the value of k
    int result = longestSubarray(arr, k);
    cout<<" the length of the longest subarray with sum k is: "<< result<< endl;
    return 0;
}
