// brute force: iterate over each element and form subarray
#include<iostream>
#include<vector>
using namespace std;
int maxSubArray( vector <int> &arr, int n ){
    int maxSum = INT_MIN; // initializes maxSum to the minimum integer value
    for ( int i=0; i<n; i++){
        for ( int j=i; j<n; j++){
            int sum = 0;
            for ( int k=i; k<=j; k++){
                sum += arr[k]; // calculates the sum of the subarray from index i to j
            }
            maxSum = max( maxSum, sum ); // updates maxSum if the current sum is greater
        }
    }
    return maxSum; // returns the maximum subarray sum
}
int main (){
    int n;
    cout<<" enter the size of the array:";
    cin>>n;
    vector<int> arr(n);
    cout<<" enter the elements of the array:";
    for( int i=0; i<n; i++){
        cin>> arr[i]; // reads the elements of the array
    }
    int result = maxSubArray(arr, n);
    cout<<" maximum subarray sum is: "<< result<< endl; // prints the maximum subarray sum
    return 0;
}


// better solution: wewill create a sum variable and store 1st no.of array in sum and further go aheadwith operations
#include<iostream>
#include<vector>
using namespace std;
int maxSubArray( vector <int> &arr, int n ){
    int maxSum= INT_MIN; // initializes maxSum to the minimum integer value
    for (int i= 0; i<n; i++){
        int sum = 0;
        for(int j=i; j<n; j++){
            sum += arr[j]; // calculates the sum of the subarray from index i to j
            maxSum = max( maxSum, sum ); // updates maxSum if the current sum is greater
        }
    }
    return maxSum; // returns the maximum subarray sum
}
int main(){
    int n;
    cout<<" enter the size of the array:";
    cin>>n;
    vector<int> arr(n);
    cout<<" enter the elements of the array:";
    for( int i=0; i<n; i++){
        cin>> arr[i]; // reads the elements of the array
    }
    int result = maxSubArray(arr, n);
    cout<<" maximum subarray sum is: "<< result<< endl; // prints the maximum subarray sum
    return 0;
}    


// optimal solution: kadane's algorithm
#include<iostream>
#include<vector>
using namespace std;
long long maxSubarray(int arr[], int n){
    long long sum = 0, maxi= LONG_MIN; 
    int start = 0, ansStart = -1, ansEnd = -1; // declare start, ansStart, ansEnd
    for ( int i= 0; i<n; i++){
        sum += arr[i];

        if ( sum> maxi){
            maxi = sum;
            ansStart = start , ansEnd = i; // updates the start and end indices of the maximum subarray
        }

        if ( sum <0){
            sum = 0;
            start = i + 1; // update start index when sum is reset
        }
    }
    
    return maxi;
}
int main(){
    int n;
    cout<<" enter the size of the array:";
    cin>>n;
    int arr[n];
    cout<<" enter the elements of the array:";
    for( int i=0; i<n; i++){
        cin>> arr[i]; // reads the elements of the array
    }
    long long result = maxSubarray(arr, n);
    cout<<" maximum subarray sum is: "<< result<< endl; // prints the maximum subarray sum
    return 0;
}
