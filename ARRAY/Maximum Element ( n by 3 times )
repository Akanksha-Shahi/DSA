// brute: pick up every element and check if it is appearing more than n/3 times
#include <iostream>
#include <vector>
using namespace std;
vector <int> maxEle( vector<int> &arr, int n){
    vector<int> ls;
    for (int i =0; i<n; i++){
        if( ls.size() == 0 || ls[0] != arr[i]){
            int count =0;
            for (int j=0; j<n; j++){
                if(arr[j] == arr[i]){
                    count++;
                }
            }
            if(count > n/3){
                ls.push_back(arr[i]);
            }
        }
        if (ls.size() == 2){
            break;
        }
    }
    return ls;
}
int main() {
    int n;
    cout << "Enter the size of the array: ";
    cin >> n;
    vector<int> arr(n);
    cout << "Enter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    vector<int> result = maxEle(arr, n);
    cout << "Elements appearing more than n/3 times are: ";
    for (int elem : result) {
        cout << elem << " ";
    }
    cout << endl;
    return 0;
}



// better: usinh hashing ( iterate over the array and add values to hash, as soon as the count == 3 put that element to ans )
#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
using namespace std;
vector<int> majorityElement( vector<int> v){
    vector<int> ls;
    map<int, int> mpp;
    int n = v.size();
    int mini =(int) (n/3) +1;
    for(int i=0; i<n; i++){
        mpp[v[i]]++;
        if(mpp[v[i]] == mini){
            ls.push_back(v[i]);
        }
        if( ls.size() == 2) break;
    }
    sort(ls.begin(), ls.end());
    return ls;
    }
int main(){
    int n;
    cout<<"Enter the size of the array: ";
    cin>>n;
    vector<int> arr(n);
    cout<<"Enter the elements of the array: ";
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }
    vector<int> result = majorityElement(arr);
    cout<<"Elements appearing more than n/3 times are: ";
    for(int elem : result){
        cout<<elem<<" ";
    }
    cout<<endl;
    return 0;
}    
  

// optimal: 
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
vector<int> majorityElement(vector<int> v) {
    int count1 = 0, count2 = 0;
    int ele1 = INT_MIN, ele2 = INT_MIN;

    // Phase 1: Find potential candidates
    for (int i =0;i<v.size(); i++){
        if(count1 == 0 && ele2 != v[i]){
            count1 = 1;
            ele1 = v[i];
        }
        else if(count2 == 0 && ele1 != v[i]){
            count2 = 1;
            ele2 = v[i];
        }
        else if(ele1 == v[i]){
            count1++;
        }
        else if(ele2 == v[i]){
            count2++;
        }
        else{
            count1--;
            count2--;
        }
    }
    // Phase 2: Verify the candidates
    vector <int> ls;
    count1 = 0;
    count2 = 0;
    for (int i=0; i<v.size(); i++){
        if(v[i] == ele1) count1++;
        else if(v[i] == ele2) count2++;
    }
    int mini = (int)(v.size()/3) + 1;
    if(count1 >= mini) ls.push_back(ele1);
    if(count2 >= mini) ls.push_back(ele2);
    sort(ls.begin(), ls.end());
    return ls;}
int main(){
    int n;
    cout<<"Enter the size of the array: ";
    cin>>n;
    vector<int> arr(n);
    cout<<"Enter the elements of the array: ";
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }
    vector<int> result = majorityElement(arr);
    cout<<"Elements appearing more than n/3 times are: ";
    for(int elem : result){
        cout<<elem<<" ";
    }
    cout<<endl;
    return 0;
}    
        
