// brute: 1st row ko last column bnao 
#include <iostream>
#include <vector>
#include <algorithm> // Required for std::reverse
using namespace std;
void rotate(vector<vector<int>>& matrix, int n) {
    int ans[n][n]; // This is a C-style array, not directly assignable to std::vector
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            ans[j][n - i - 1] = matrix[i][j];
        }
    }
    // Copy elements from ans to matrix
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            matrix[i][j] = ans[i][j];
        }
    }}
int main() {
    int n;
    cout << "Enter the size of the matrix (n x n): ";
    cin >> n;
    vector<vector<int>> matrix(n, vector<int>(n));
    cout << "Enter the elements of the matrix: ";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> matrix[i][j];
        }
    }

    rotate(matrix, n);

    cout << "Matrix after rotation: " << endl;
    for (const auto& row : matrix) {
        for (const auto& elem : row) {
            cout << elem << " ";
        }
        cout << endl;
    }
    return 0;
}


/* optimal: we are asked to solve the matrix inplace which means we won't use any extra matrix to solve.
1st column of matrix one becomes row 1 of matrix 2 but in reverse order */
#include <iostream>
#include<vector>
using namespace std;
void rotate(vector<vector<int>>& matrix, int n){
    // transpose of matrix
    for(int i=0;i<n;i++){
        for(int j=i;j<n;j++){
            swap(matrix[i][j],matrix[j][i]);
        }
    }
    // reverse each row
    for(int i=0;i<n;i++){
        reverse(matrix[i].begin(),matrix[i].end());
    }
}
int main() {
    int n;
    cout << "Enter the size of the matrix (n x n): ";
    cin >> n;
    vector<vector<int>> matrix(n, vector<int>(n));
    cout << "Enter the elements of the matrix: ";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cin >> matrix[i][j];
        }
    }

    rotate(matrix, n);

    cout << "Matrix after rotation: " << endl;
    for (const auto& row : matrix) {
        for (const auto& elem : row) {
            cout << elem << " ";
        }
        cout << endl;
    }
    return 0;
}
