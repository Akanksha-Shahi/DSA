// THREE SUM PROBLEM
// brute: O(n^3) approach
#include<iostream>
#include<vector>
#include<set>
#include<algorithm>
using namespace std;
vector <vector<int>> triplet(int n, vector<int> &num){
    vector<vector<int>> ans;
    set <vector<int>> st;
    for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            for(int k=j+1;k<n;k++){
                if(num[i]+num[j]+num[k]==0){
                    vector<int> temp = {num[i],num[j],num[k]};
                    sort (temp.begin(),temp.end());
                    st.insert(temp);
                }
            }
        }
    }
    vector<vector<int>> ans(st.begin(),st.end());
    return ans;
}
int main(){
    int n;
    cout<<"Enter the size of array: ";
    cin>>n;
    vector<int> num(n);
    cout<<"Enter the elements of array: ";
    for(int i=0;i<n;i++){
        cin>>num[i];
    }
    vector<vector<int>> result = triplet(n,num);
    cout<<"The unique triplets that sum to zero are: "<<endl;
    for(auto triplet : result){
        for(auto val : triplet){
            cout<<val<<" ";
        }
        cout<<endl;
    }
    return 0;
}



// better: O(n^2logn) approach
#include<iostream>
#include<vector>
#include<set>
#include<algorithm>
using namespace std;
vector <vector<int>> triplet(int n, vector<int> &num){
    vector<vector<int>> ans;
    set <vector<int>> st;
    for(int i=0;i<n;i++){
        set<int> hashset;
        for(int j=i+1;j<n;j++){
            int target = -(num[i]+num[j]);
            if(hashset.find(target) != hashset.end()){
                vector<int> temp = {num[i],num[j],target};
                sort(temp.begin(),temp.end());
                st.insert(temp);
            }
            hashset.insert(num[j]);
        }
    }
    vector<vector><int>> ans(st.begin(),st.end());
    return ans;
}
int main(){
    int n;
    cout<<"Enter the size of array: ";
    cin>>n;
    vector<int> num(n);
    cout<<"Enter the elements of array: ";
    for(int i=0;i<n;i++){
        cin>>num[i];
    }
    vector<vector<int>> result = triplet(n,num);
    cout<<"The unique triplets that sum to zero are: "<<endl;
    for(auto triplet : result){
        for(auto val : triplet){
            cout<<val<<" ";
        }
        cout<<endl;
    }
    return 0;
}


// optimal : two pointer appraoch
#include<iostream>
#include<vector>
#include<algorithm>
#include<set>
using namespace std;
vector <vector<int>> triplet(int n, vector<int> &num){
    vector<vector<int>> ans;
    sort(num.begin(),num.end());
    for(int i=0;i<n;i++){
        if(i>0 && num[i]==num[i-1]) continue; // skip duplicates
        int j = i+1;
        int k = n-1;
        while(j<k){
            int sum = num[i]+num[j]+num[k];
            if(sum<0){
                j++;
            }
            else if(sum>0){
                k--;
            }
            else{
                vector<int> temp = {num[i],num[j],num[k]};
                ans.push_back(temp);
                j++;
                k--;
                while(j<k && num[j]==num[j-1]) j++; // skip duplicates
                while(j<k && num[k]==num[k+1]) k--; // skip duplicates
                
            }
        }
    }
    return ans;
}
int main(){
    int n;
    cout<<"Enter the size of array: ";
    cin>>n;
    vector<int> num(n);
    cout<<"Enter the elements of array: ";
    for(int i=0;i<n;i++){
        cin>>num[i];
    }
    vector<vector<int>> result = triplet(n,num);
    cout<<"The unique triplets that sum to zero are: "<<endl;
    for(auto triplet : result){
        for(auto val : triplet){
            cout<<val<<" ";
        }
        cout<<endl;
    }
    return 0;
}
